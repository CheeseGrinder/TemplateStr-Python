Varaible : ${test} ${test.test} ${test_test.test} ${${test_test.test}}
    reg : (?P<match>\${(?P<key>[\w._-]+)(?:\[(?P<index>[\d]+)\])?})

Function : @{test} @{test; test2} @{test; param b/test}
    reg : (?P<match>@{(?P<functionName>[^{}\s]+)(?:; (?P<parameters>[^{}]+))?})
    
Condition : #{test == test; test | test} #{test != test; #{"test" == test; test | test} | test}
    reg : (?P<match>#{(?P<conditionValue1>[^{}]+) (?P<conditionSymbol>==|!=|<=|<|>=|>) (?P<conditionValue2>[^{}]+); (?P<trueValue>[^{}]+) \| (?P<falseValue>[^{}]+)})
    
Switch : ?{test; test::ok, test2::ko, _::default} ?{int/test; test::ok, test2::nop, _::default}
    reg : (?P<match>\?{(?:(?P<key>[^{}/]+)|(?P<type>str|int|float)/(?P<tKey>[^{}]+)); (?P<values>(?:[^{}]+::[^{}]+){2,}), _::(?P<defaultValue>[^{}]+)})

Typing : variable test[1456] "test" 'test' `test` b/true b/false i/123_123 f/123_132.156_32 (list,test)
    reg : \"(?P<str_double>[^\"]+)\"|\'(?P<str_single>[^\']+)\'|`(?P<str_back>[^`]+)`|b/(?P<bool>[Tt]rue|[Ff]alse)|i/(?P<int>[0-9_]+)|f/(?P<float>[0-9_.]+)|(?P<variable>[\w._-]+(?:\[(?P<numList>[\d]+)])?)|\((?P<list>[^\(\)]+)\)
    